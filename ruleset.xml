<?xml version="1.0"?>
<ruleset name="omz13">
  <description>
    How omz13 likes code to look.
  </description>

  <!-- tabs -->
  <arg name="tab-width" value="2"/>

  <!-- see https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties#squizwhitespacefunctionspacing -->

  <!-- all generic -->
  <rule ref="Generic"/>

  <rule ref="Generic.Arrays.ArrayIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="Generic.Arrays.DisallowShortArraySyntax.Found">
    <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>
  </rule>

  <rule ref="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine">
    <exclude name="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine"/>
  </rule>

  <!-- if there is a todo, don't complain (fix it later!) -->
  <rule ref="Generic.Commenting.Todo.TaskFound">
    <exclude name="Generic.Commenting.Todo.TaskFound"/>
  </rule>

  <rule ref="Generic.Commenting.DocComment.MissingShort">
    <exclude name="Generic.Commenting.DocComment.MissingShort"/>
  </rule>

  <rule ref="Generic.Files.EndFileNoNewline.Found">
    <exclude name="Generic.Files.EndFileNoNewline.Found"/>
  </rule>

  <rule ref="Generic.Files.LineLength">
    <exclude name="Generic.Files.LineLength"/>
  </rule>

  <!--
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="200"/>
      <property name="absoluteLineLimit" value="0"/>
    </properties>
  </rule>
  -->

  <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
    <properties>
      <property name="checkFunctions" value="true"/>
      <property name="checkClosures" value="true"/>
    </properties>
  </rule>

  <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine">
    <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>
  </rule>

  <rule ref="Generic.PHP.ClosingPHPTag.NotFound">
    <exclude name="Generic.PHP.ClosingPHPTag.NotFound"/>
  </rule>

  <rule ref="Generic.PHP.UpperCaseConstant.Found">
    <exclude name="Generic.PHP.UpperCaseConstant.Found"/>
  </rule>

  <rule ref="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed">
    <exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed"/>
  </rule>

  <!-- my code is complex... deal with it -->
  <rule ref="Generic.Metrics.CyclomaticComplexity">
    <properties>
      <property name="complexity" value="18"/>
      <property name="absoluteComplexity" value="30"/>
    </properties>
  </rule>

  <rule ref="Generic.Metrics.NestingLevel">
    <properties>
      <property name="nestingLevel" value="8"/>
      <property name="absoluteNestingLevel" value="12"/>
    </properties>
  </rule>

  <rule ref="Generic.Strings.UnnecessaryStringConcat">
    <properties>
      <property name="allowMultiline" value="true"/>
    </properties>
  </rule>

  <!-- spaces around parens -->
  <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
      <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
    </properties>
  </rule>

  <!--The complete PSR-2 ruleset-->
  <rule ref="PSR2"/>

  <rule ref="PSR2.Classes.ClassDeclaration">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
    <properties>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="PSR2.ControlStructures.SwitchDeclaration">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PSR2.Methods.FunctionCallSignature">
    <properties>
      <property name="indent" value="4"/>
      <property name="allowMultipleArguments" value="false"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <!-- some of the squiz - adjusted accordingly to work with PSR2 as tweaked above -->

  <!-- Squiz.Operators.ComparisonOperatorUsage.NotAllowed -->
  <!-- Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue -->
  <!-- Squiz.Commenting.InlineComment.NotCapital -->
  <!-- Squiz.Commenting.InlineComment.InvalidEndChar -->

  <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>

  <rule ref="Squiz.Commenting.LongConditionClosingComment">
    <properties>
      <property name="lineLimit" value="14"/>
    </properties>
  </rule>

  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine">
    <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
  </rule>

  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
    <exclude name="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  </rule>

  <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
    <exclude name="Squiz.ControlStructures.ForLoopDeclaration"/>
  </rule>

  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <!-- Force whitespace before and after concatenation -->
  <rule ref="Squiz.Strings.ConcatenationSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing">
    <properties>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.FunctionSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="spacingAfterLast" value="0"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

  <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
    <properties>
      <property name="spacing" value="0"/>
      <property name="spacingBeforeFirst" value="0"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>

  <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

  <!-- Some slevomat -->
  <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
    <properties>
      <property name="spacesCountBeforeColon" value="1"/>
      </properties>
  </rule>
  <!-- <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/> -->
  <!-- <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"/> -->

</ruleset>
